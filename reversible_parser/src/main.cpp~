/*
 * main.cpp
 *
 *  Created on: Jan 23, 2017
 *      Author: josl
 */

#include <ast/AST2Graphviz.h>
#include <ast/ASTNode.h>
#include <ast/GraphvizPrinter.h>
#include <D7pcInterpretation.h>
#include <D7pcParser.h>
#include <D7pcTokenType.h>
#include <File23.h>
#include <lexer/RegexLexer.h>
#include <lexer/TokenBuffer.h>
#include <parser/ParseResult.h>
#include <ros/package.h>
#include <iostream>
#include <memory>
#include <string>
#include <vector>


int main(int argc, char **argv)
{

	using namespace edsl;
	using namespace edsl::lexer;

	std::cout << "program start" << std::endl;

	std::cout << "### File read ###" << std::endl;
	std::string filepath = ros::package::getPath("reversible_demo") + "/src/";
	std::string filename = "edsl.txt";
	File23 file(filepath, filename);
	std::string input = file.readFile();

	std::cout << "### LEXING ###" << std::endl;
	RegexLexer lexer;
	lexer.consumeFile(input, D7pcTokenType::getTokenList());
	lexer::TokenBuffer tokenbuffer(lexer.tokenStream, true);
	lexer.to_screen();

	std::cout << "### PARSING ###" << std::endl;
	parser::ParseResult result = D7pcParser::parse(tokenbuffer);

	std::cout << "### ABSTRACT SYNTAX TREE ###" << std::endl;
	std::shared_ptr<abstract_syntax_tree::GraphvizPrinter> graphdot = std::make_shared<abstract_syntax_tree::GraphvizPrinter>();
	abstract_syntax_tree::AST2Graphviz::print(graphdot, result.getActionResult());
	graphdot.reset();

/*
	std::cout << "### CODE GENNERATION ###" << std::endl;
	D7pcCodeGenneration code_genneration(result.getActionResult());

	std::cout << "### USEING CODEGEN ###" << std::endl;
//	edsl::D7pcString2Variable vars;
//	std::cout << "Use code test: " << vars.toQ("wc.qInspectOuterShell") << std::endl;

	std::cout << "### INTERPRETATION ###" << std::endl;
	D7pcInterpretation interpreter;
	auto instruction_root = interpreter.interprete(result.getActionResult());

	std::cout << "### MODEL PRINT ###" << std::endl;
	dsl::common::GraphRepresentation graph123(instruction_root);
	dsl::common::GraphPrint graphprint(graph123);

	std::cout << "### MODEL EXECUTION ###" << std::endl;
	model::ControlUnit control(instruction_root);
	control.execute();

	std::cout << "program end" << std::endl;
	return 0;
*/
}
