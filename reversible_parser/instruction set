


		rw::kinematics::State state = wc.getDefaultState();
		gripper::D7PC_Gripper::GraspConfig graspConfig = wsg->outer_shell;
		VisionSystem::ObjectType visType = VisionSystem::ObjectType::OuterShell;
		Move move1(iiwa, wc.planner, wc.wc, wc.device, wc.toolFrame);
		Move move4(iiwa, wc.planner, wc.wc, wc.device, wc.toolFrame);
		rw::math::Transform3D<> baseTtoolAssemblyRetracted
		rw::math::Transform3D<> baseTtoolAssembly
		rw::math::Transform3D<> toolTobject 




		wc.setQ(iiwa->getQ(), state);

		moveq.move(wc.qDispenser, state);

		wsg->open(graspConfig);

		anyfeeder->shakeFeeder();
		visionSystem->update_pose(visType);
		dg.update(visionSystem->calc_camTobject());
		wc.setQ(iiwa->getQ(), state);
		move1.plan(dg.baseTtoolRetract, state);
		wc.setQ(move1.get_endQ(), state);
		movel.is_in_reach(dg.baseTtool, state);
		move1.move_forward();
		movel.move_forward(dg.baseTtool);
		wsg->close(graspConfig);
		movel.move_forward(dg.baseTtoolRetract);
	
		wc.setQ(iiwa->getQ(), state);
		wc.attachTo(wc.outershellFrame, wc.outershellGraspFrame, state);

		moveq.move(wc.qInspectOuterShell, state);
		ros::Duration(0.5).sleep();
		inspectionSystem->update(InspectionSystem::ObjectType::OuterShell);
		
		toolTobject = inspectionSystem->calc_transform_tooTobject(InspectionSystem::ObjectType::OuterShell);
		std::cout << dsl::color::GREEN << "deg: " << inspectionSystem->get_rotation_deg() << dsl::color::DEFAULT << std::endl;

		baseTtoolAssemblyRetracted = converter->toBaseTtool(toolTobject, wc.outershellAssemblyRetractedFrame, state);
		baseTtoolAssembly = converter->toBaseTtool(toolTobject, wc.outershellAssemblyFrame, state);

		wc.setQ(iiwa->getQ(), state);
		move4.plan(baseTtoolAssemblyRetracted, state )
		wc.setQ(move4.get_endQ(), state);
		movel.is_in_reach(baseTtoolAssembly, state )
		move4.move_forward();
		movel.move_forward(baseTtoolAssembly);
		wsg->open(wsg->outer_shell);
		movel.move_forward(baseTtoolAssemblyRetracted);


-------------------------------------------------------------------------




		rw::kinematics::State state = wc.getDefaultState();
		gripper::D7PC_Gripper::GraspConfig graspConfig = wsg->outer_shell;
		VisionSystem::ObjectType visType = VisionSystem::ObjectType::OuterShell;
		Move move1(iiwa, wc.planner, wc.wc, wc.device, wc.toolFrame);
		Move move4(iiwa, wc.planner, wc.wc, wc.device, wc.toolFrame);
		rw::math::Transform3D<> baseTtoolAssemblyRetracted
		rw::math::Transform3D<> baseTtoolAssembly
		rw::math::Transform3D<> toolTobject 

		wc.setQ(iiwa->getQ(), state);
		wc.setQ(iiwa->getQ(), state);
		wc.setQ(iiwa->getQ(), state);
		wc.setQ(iiwa->getQ(), state);
		wc.setQ(move5.get_endQ(), state);
		wc.setQ(move4.get_endQ(), state);
		wc.attachTo(wc.outershellFrame, wc.outershellGraspFrame, state);

		wsg->close(graspConfig);
		wsg->open(graspConfig);
		wsg->open(wsg->outer_shell);

		anyfeeder->shakeFeeder();
		visionSystem->update_pose(visType);
		dg.update(visionSystem->calc_camTobject());

		moveq.move(wc.qDispenser, state);
		moveq.move(wc.qInspectOuterShell, state);

		move4.plan(baseTtoolAssemblyRetracted, state )
		move1.plan(dg.baseTtoolRetract, state);
		move4.move_forward();
		move1.move_forward();

		movel.is_in_reach(dg.baseTtool, state);
		movel.is_in_reach(baseTtoolAssembly, state )
		movel.move_forward(dg.baseTtool);
		movel.move_forward(dg.baseTtoolRetract);	
		movel.move_forward(baseTtoolAssembly);
		movel.move_forward(baseTtoolAssemblyRetracted);


		ros::Duration(0.5).sleep();
		
		inspectionSystem->update(InspectionSystem::ObjectType::OuterShell);
		toolTobject = inspectionSystem->calc_transform_tooTobject(InspectionSystem::ObjectType::OuterShell);

		std::cout << dsl::color::GREEN << "deg: " << inspectionSystem->get_rotation_deg() << dsl::color::DEFAULT << std::endl;

		baseTtoolAssemblyRetracted = converter->toBaseTtool(toolTobject, wc.outershellAssemblyRetractedFrame, state);
		baseTtoolAssembly = converter->toBaseTtool(toolTobject, wc.outershellAssemblyFrame, state);



-------------------------------------------------------------------------

		var State : state
		var GraspConf : graspconf
		var VisType : vistype
		var Move : move5
		var Transform : baseTtoolAssemblyRetracted

		set : graspconf, wsg.outershell
		set : state getQ(iiwa)
		set : state getQ(move5)
		set : state wc.outershellFrame wc.outershellGraspFrame

		wsg close : graspconfig
		wsg open : graspconfig
		wsg open : wsg.outershell

		anyfeeder shakeforward
		anyfeeder shakebackwards

		vision update pose : vistype
		set : camTobj vision.camTobject

		dg update : camTobj
		set : baseTpick dg.baseTpick
		set : baseTpickRetracted dg.baseTpickRetracted

		moveq : wc.qDispenser state;

		plan : move5 baseTtoolAssembly state
		move : move5 

		movel in_reach : baseTtool state
		movel move : baseTtool

		wait : 0.5

		inspection  update : objtype.outershell
		set toolTobject inspection.toolTobject

		print : inspection.get_rotation

		set : baseTtoolAssembly converter.toBaseTtool(toolTobject, wc.outershellAssemblyRetractedFrame, state);



----------------------------------------------------------------------------------------------------------------------

		var State : state


		rw::kinematics::State state = wc.getDefaultState();
		wc.setQ(iiwa->getQ(), state);
		moveq.move(wc.qDispenser, state);

		gripper::D7PC_Gripper::GraspConfig graspConfig = wsg->outer_shell;
		VisionSystem::ObjectType visType = VisionSystem::ObjectType::OuterShell;
		wsg->open(graspConfig);
		Move move1(iiwa, wc.planner, wc.wc, wc.device, wc.toolFrame);

		bool do_pick_from_anyfeeder = true;
		if(do_pick_from_anyfeeder)
		{
			while(ros::ok())
			{
				bool rv = visionSystem->update_pose(visType);
				if(rv == true)
				{
					dg.update(visionSystem->calc_camTobject());
					wc.setQ(iiwa->getQ(), state);
					bool r1 = move1.plan(dg.baseTtoolRetract, state);
					if(r1 == true)
					{
						wc.setQ(move1.get_endQ(), state);
						bool r2 = movel.is_in_reach(dg.baseTtool, state);
						if(r2 == true)
							break;
						else
							std::cout << "Faild to plan linear path to object" << std::endl;
					}
					else
						std::cout << "Failed to plan path to object" << std::endl;
				}
				else
					std::cout << "Failed to located object with vision" << std::endl;
				anyfeeder->shakeFeeder();
			}
			move1.move_forward();
			movel.move_forward(dg.baseTtool);
			wsg->close(graspConfig);
			movel.move_forward(dg.baseTtoolRetract);
		}
		else
		{
			rw::math::Transform3D<> baseTpick = converter->frameTframe(wc.baseFrame, wc.outershellFixedPickTcpFrame, state);
			rw::math::Transform3D<> baseTpickRetracted = converter->frameTframe(wc.baseFrame, wc.outershellFixedPickRetractedTcpFrame, state);

//			wc.setQ(iiwa->getQ(), state);
//			moveq.move(wc.qZero, state);
			wc.setQ(iiwa->getQ(), state);

			bool r1 = move1.plan(baseTpickRetracted, state);
			if(r1 == false)
				continue;

			wc.setQ(move1.get_endQ(), state);
			bool r2 = movel.is_in_reach(baseTpick, state);
			if(r2 == false)
				continue;

			move1.move_forward();
			movel.move_forward(baseTpick);
			wsg->close(graspConfig);
			movel.move_forward(baseTpickRetracted);

		}


		wc.setQ(iiwa->getQ(), state);
		wc.attachTo(wc.outershellFrame, wc.outershellGraspFrame, state);

		moveq.move(wc.qInspectOuterShell, state);
		bool was_inspection_succesfull = false;
		ros::Duration(0.5).sleep();
		was_inspection_succesfull = inspectionSystem->update(InspectionSystem::ObjectType::OuterShell);
		if(was_inspection_succesfull == false)
		{
			ROS_INFO("Inspection unsuccesfull, restarting local loop");
			continue;
		}
		rw::math::Transform3D<> toolTobject = inspectionSystem->calc_transform_tooTobject(InspectionSystem::ObjectType::OuterShell);
		std::cout << dsl::color::GREEN << "deg: " << inspectionSystem->get_rotation_deg() << dsl::color::DEFAULT << std::endl;

		rw::math::Transform3D<> baseTtoolAssemblyRetracted = converter->toBaseTtool(toolTobject, wc.outershellAssemblyRetractedFrame, state);
		rw::math::Transform3D<> baseTtoolAssembly = converter->toBaseTtool(toolTobject, wc.outershellAssemblyFrame, state);

		Move move4(iiwa, wc.planner, wc.wc, wc.device, wc.toolFrame);
		wc.setQ(iiwa->getQ(), state);
		if( !move4.plan(baseTtoolAssemblyRetracted, state ) )
			continue;

		wc.setQ(move4.get_endQ(), state);
		if( !movel.is_in_reach(baseTtoolAssembly, state ) )
			continue;

		move4.move_forward();
		movel.move_forward(baseTtoolAssembly);
		wsg->open(wsg->outer_shell);
		movel.move_forward(baseTtoolAssemblyRetracted);
		break;
	}



	movel 
	movel : baseTtoolAssemblyRetracted













---------------------------------------------------------------------------------------------------------------------------------------


Hej Ulrik
Jeg har lidt svært ved at forstå og sætte ord på hvad problemet helt er - og måske endda også lige at se hvad den baglænse opførsel burde være.
Her er dog en liste med ting som falder mig ind når jeg kigger på det.


Først lidt om den overordnet program-strukur:
Vi har lige nu programmeret casen på traditionel vis. 
Den programmering vi er ikke reversible - men er meget inspireret af 'hvis det fejler så prøv igen'-tankegangen.
Der er i casen 6 objekter der skal sættes sammen. Det forgår på nogenlunde ens vis - dog med forskelligeheder. Det vil sige vores program som det ser ud nu har følgende struktur:

//Pick and place object 1
while(true)
{
	do_something...
	if(do_something fails)
		continue;

	...

	do_something_else...
	if(do_something_else fails)
		continue;

	do_something_more...

	break;
}

//pick and place object 2
while(true)
{
	...


Der pudsige er, at når folk ser programmet køre på robotten tror de at det er en reversible løsning - selvom det enlig ikke har noget med reversabilitet at gøre. Den måde vi tidligere har brugt reversabiliet og fejlhåndtering på ville dog kunne gøre koden pænere og mere læslig. Desuden er der i det nuværende program muligheder for fejl når man springer tilbage og prøver igen - fordi at den state som robotten bruger til at planlægge sine baner ud fra ikke bliver kørt tilbage men bare bliver resat. En rigtig reversible løsning ville også giver flere muligheder så som at forsøge at gå længere tilbage end bare det nuværende while-løkke. 

Nedenunder har jeg forsøgt at beskrive nogle af de tilfælde hvor der er noget med variable og program staten der skal håndteres reverst.

### 
Vi har en variable der beskriver griberens opførsel - hastighed, kraft, åbning osv.
Variablen bliver til tider overskrevet ala:

	config = wsg_gripper->Outershell_conifg
	...
	wsg->open(config)
	....
	config = wsg_gripper->Innerstructure_config

Det her kunne sikkert løses på traditionelvis med en stak eller noget 
der forudsigelse ala hvad vi tidligere har gjort med jointconfigurationer. 


###
Vision systemet giver en transformation fra cameraTobject.
Den bliver brugt til at regne 2 nye transformationer: baseTpick og baseTpickRetracted.
For at kunne regne baglæns til cameraTobject har man kun brug for én af disse transformationer.

Den ligner i almindelig forward-kode noget i stil med:
cameraTobject = vision.update()
baseTpick = vision.baseTpick
baseTpickRetracted = vision.baseTpickRetracted


###
I fremadretet eksekvering skal der planlægges en rute til q1 derefter til q2. Kun hvis det lykkedes skal robotten bevæge sig. 
I kode noget i stil med:

plan_path : q1 -> path1
	plan_path : q2 -> path2
		move : path1
		move : path2 

Hvad er den reverse aktion her: Skal vi altid planlægge vejen tilbage inden vi kan køre den?
I almindelig reversible programmering ville man bagud opførsel resultere i noget underligt. 
Problemet er også uddybet i sidste kommentar. 

###
De to planlægnings skridt er afhængige af variable som hinanden gennerere. Planlægnings skridt 1 tager både den nuværende position og target-positionen som input. Planlægning 2 tager slut-resultatet fra første planlægning og en ny target-position som input.

q0 = robot.qCurrent
plan_path : q0 to q1 -> path1
	plan_path : path1.end to q2 -> path2
		move : path1
		move : path2 


###
I koden har man en beskrivelse af workcell-staten. Altså hvor står robtten, hvad har den i håden osv. 
Den skal gerne reflektere workcellens faktiske tilstand. I janus bruges der både local og delocal syntax til manuelt at beskrive 
en variables værdi alt efter om koden eksekveres forlæns eller baglæns - men i vores tilfælde ville man faktisk kunne udregne hvad delocal værdien burde være. 

I almindelig kode ligner det noget med:

local state = default_state()
...
state.update('set new Q')
...
state.update('set object in hand')
...
state.update('set new Q')
...


###
Vi bruge en rysteføder og et kamera system til samle elementer op fra en ukendt position.
I fremadrettet kode se det således ud:

	while(true)
	{
		anyfeeder.shake_forward();

		bool was_obj_found = visionSystem.update();
		if(was_obj_found)
		{
			state.update(robot.get_currentQ());
			bool was_path1_found = move1.plan(visionSystem.baseTtoolRetract, state);
			if(was_path1_found)
			{
				state.update(move1.get_endQ());
				bool was_path1_found = move2.is_in_reach(visionSystem.baseTtool, state);
				if(was_path2_found)
					break;
			}
		}
	}
	move1.move_forward()
	move2.move_forward()

I en semi-reversible syntax hvor progrmmet først kan blive kørt baglæns efter forlæns eksekvering - og hvor hver kommando kan give en fejl hvilket ændre kørsels-retningen, kunne det måske ligne:

	anyfeeder.shake_forward();
	visionSystem.update()
	state.update(robot.get_currentQ)
	move1.plan(baseTtoolRetract, state)
	state.update(move1.get_endQ())
	move2.plan(baseTtool, state)
	move1.move_forward()
	move2.move_forward()

men hvordan skulle det skrives hvis hele programmet blev kørt reverst uden først at være kørt forlæns? Hvordan ændre det rækkefølgen af kommandoer og deres afhængigheder. Eks. state.update(move1.get_endQ()) bruge en variable fra et objekt der ikke er udregnet endnu.  



###
update state with actual measuremtn rather then precived state


###
stuff which only provides importent information after execution
	vision update pose : vistype
	set : camTobj vision.camTobject


### Objects and handling information from objects


###Override precived state with actual state




Syntax
command : var1 var2 -> return_value















































